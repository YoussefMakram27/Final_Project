# import rclpy
# from rclpy.node import Node
# from sensor_msgs.msg import LaserScan
# from geometry_msgs.msg import Twist

# class ReactiveNavNode(Node):
#     def __init__(self):
#         super().__init__('reactive_nav_node')
#         self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)
#         self.scan_sub = self.create_subscription(LaserScan, '/scan', self.scan_callback, 10)

#         self.emergency_stop = False
#         self.rotating = False  # Flag to check if robot is rotating to find clear space

#     def scan_callback(self, msg: LaserScan):
#         ranges = list(msg.ranges)

#         # Clean the data: remove 0.0 and large outliers
#         ranges = [r if 0.05 < r < 10.0 else 10.0 for r in ranges]

#         n = len(ranges)
#         front = ranges[n//2 - 10 : n//2 + 10]
#         left = ranges[n//2 + 30 : n//2 + 60]
#         right = ranges[n//2 - 60 : n//2 - 30]

#         min_front = min(front)
#         min_left = min(left)
#         min_right = min(right)

#         twist = Twist()

#         if min_front < 0.5:  # Very close obstacle ahead, emergency stop
#             self.get_logger().warn(f'EMERGENCY BRAKE! Obstacle detected at {min_front:.2f}m!')
#             twist.linear.x = 0.0  # Stop forward motion
#             twist.angular.z = 0.0  # Stop rotation
#             self.emergency_stop = True
#             self.rotating = True  # Begin rotating to find clear space
#         elif self.emergency_stop and self.rotating:
#             # Rotate in place to scan other directions for a clear path
#             self.get_logger().info('Scanning for clear space...')
#             twist.linear.x = 0.0
#             twist.angular.z = 1.0  # Rotate counter-clockwise (slow turn)

#             # After a few seconds or rotations, check if we can find a clear space
#             if min_front > 1.5:  # If front is clear enough to move forward
#                 self.get_logger().info('Clear path found, resuming forward motion.')
#                 self.emergency_stop = False  # Reset emergency stop flag
#                 self.rotating = False  # Stop rotating
#                 twist.linear.x = 0.3  # Resume forward motion
#                 twist.angular.z = 0.0  # Keep straight
#         else:
#             # Normal navigation: obstacle avoidance behavior
#             if min_front < 2.0:  # Obstacle ahead
#                 self.get_logger().info(f'Obstacle detected at {min_front:.2f}m! Deciding turn...')
                
#                 if min_left > min_right and min_left > 0.5:
#                     self.get_logger().info('Turning LEFT (left side clearer)')
#                     twist.linear.x = 0.0
#                     twist.angular.z = 1.5  # fast left turn
#                 elif min_right > 0.5:
#                     self.get_logger().info('Turning RIGHT (right side clearer)')
#                     twist.linear.x = 0.0
#                     twist.angular.z = -1.5  # fast right turn
#                 else:
#                     self.get_logger().info('Both sides blocked! Turning LEFT by default')
#                     twist.linear.x = 0.0
#                     twist.angular.z = 1.5  # safer to pick one side
#             else:
#                 twist.linear.x = 0.3  # move forward
#                 twist.angular.z = 0.0

#         self.cmd_vel_pub.publish(twist)

# def main(args=None):
#     rclpy.init(args=args)
#     node = ReactiveNavNode()
#     rclpy.spin(node)
#     node.destroy_node()
#     rclpy.shutdown()

==============================

<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="base_length" value="0.6" />
    <xacro:property name="base_width" value="0.4" /> <!--0.6 0.4 0.2-->
    <xacro:property name="base_height" value="0.2" />
    <xacro:property name="wheel_radius" value="0.1" />
    <xacro:property name="wheel_length" value="0.05" />
    

    <link name = "base_footprint" />

    <link name = "base_link">
        <visual>
            <geometry>
                <box size = "${base_length} ${base_width} ${base_height}"></box>
            </geometry>
            <origin xyz = "0 0 ${base_height / 2.0}" rpy = "0 0 0"></origin>
            <material name = "blue"/>
        </visual>
        <collision>
            <geometry>
                <box size = "${base_length} ${base_width} ${base_height}"></box>
            </geometry>
            <origin xyz = "0 0 ${base_height / 2.0}" rpy = "0 0 0"></origin>
        </collision>
        <xacro:box_inertia m="5.0" l="${3*base_length}" w="${3*base_width}" h="${3*base_height}"
                           xyz="0 0 ${3*base_height / 2.0}" rpy="0 0 0" />
    </link>

    <xacro:macro name="wheel_link" params="prefix">
        <link name = "${prefix}_wheel_link">
            <visual>
                <geometry>
                    <cylinder radius = "${wheel_radius}" length = "${wheel_length}" />
                </geometry>
                <origin xyz = "0 0 0" rpy = "${pi / 2.0} 0 0" />
                <material name = "grey" />
            </visual>
            <collision>
                <geometry>
                    <cylinder radius = "${wheel_radius}" length = "${wheel_length}" />
                </geometry>
                <origin xyz = "0 0 0" rpy = "${pi / 2.0} 0 0" />
            </collision>
            <xacro:cylinder_inertia m ="1.0" r="${3*wheel_radius}" h="${3*wheel_length}" xyz=" 0 0 0" 
                                    rpy="${pi / 2.0} 0 0" />
        </link>
    </xacro:macro>

    <xacro:wheel_link prefix="right"/>
    <xacro:wheel_link prefix="left"/>
    <xacro:wheel_link prefix="right_front"/>
    <xacro:wheel_link prefix="left_front"/>

    <joint name = "base_footprint_base_joint" type = "fixed">
        <parent link = "base_footprint" />
        <child link = "base_link" />
        <origin xyz = "0 0 0.1" rpy = "0 0 0" />
    </joint>

    <joint name = "base_right_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "right_wheel_link" />
        <origin xyz = "${-base_length / 4.0} ${-(base_width + wheel_length) / 2.0} 0" rpy = "0 0 0" />
        <axis xyz = "0 1 0" />
    </joint>

    <joint name = "base_left_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "left_wheel_link" />
        <origin xyz = "${-base_length / 4.0} ${(base_width + wheel_length) / 2.0} 0" rpy = "0 0 0" />
        <axis xyz = "0 1 0" />
    </joint>

    <joint name = "base_right_front_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "right_front_wheel_link" />
        <origin xyz = "${base_length / 4.0} ${-(base_width + wheel_length) / 2.0} 0" rpy = "0 0 0" />
        <axis xyz = "0 1 0" />
    </joint>

    <joint name = "base_left_front_wheel_joint" type = "continuous">
        <parent link = "base_link" />
        <child link = "left_front_wheel_link" />
        <origin xyz = "${base_length / 4.0} ${(base_width + wheel_length) / 2.0} 0" rpy = "0 0 0" />
        <axis xyz = "0 1 0" />
    </joint>

</robot>    

=========================

<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="lidar_radius" value="0.05" /> 
    <xacro:property name="lidar_length" value="0.04" /> 

    <!-- <xacro:property name="lidar_length" value="0.01" />
    <xacro:property name="lidar_width" value="0.1" />
    <xacro:property name="lidar_height" value="0.05" /> -->

    <link name="lidar_link">
        <visual>
            <geometry>
                <!-- <box size = "${lidar_length} ${lidar_width} ${lidar_height}"></box> -->
                <cylinder radius = "${lidar_radius}" length = "${lidar_length}" />
            </geometry>
            <material name="red" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius = "${lidar_radius}" length = "${lidar_length}" />
            </geometry>
        </collision>
        <!-- <xacro:box_inertia m="0.1" l="${lidar_length}" w="${lidar_width}" h="${lidar_height}"
                           xyz="0 0 0" rpy="0 0 0" /> -->
        <xacro:cylinder_inertia m ="0.1" r="${lidar_radius}" h="${lidar_length}" xyz=" 0 0 0" 
                                    rpy="0 0 0" />
    </link>

    <joint name="base_lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_link"/>
        <origin xyz="0.1 0 0.2" rpy="0 0 0"/>
    </joint>

    <gazebo reference="lidar_link">
        <material>Gazebo/Red</material> 
    
        <sensor name="lidar" type="ray">
            <pose> 0 0 0 0 0 0 </pose>
            <visualize>true</visualize>
            <update_rate>30</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <min_angle>-3.14</min_angle>
                        <max_angle>3.14</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.3</min>
                    <max>12</max>
                </range>
            </ray>
            <plugin name="lidar_controller" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <argument>~/out:=scan</argument>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frame_name>lidar_link</frame_name>
            </plugin>
        </sensor>
    </gazebo> 

</robot>
